sanaullahfiverr526@gmail.com



sanaullah(//1234)
یقیناً! ویب ایپلیکیشنز کی کارکردگی کو بہتر بنانے کے لیے درج ذیل تکنیکیں استعمال کی جاتی ہیں:

1. HTTP درخواستوں کو کم کریں
فائلز کو ملا دیں: CSS اور JavaScript فائلز کو ملا کر درخواستوں کی تعداد کم کریں۔
اسپرائٹس کا استعمال کریں: چھوٹی تصاویر کو ایک بڑی امیج اسپرائٹ میں ملا دیں تاکہ تصاویر کی درخواستوں کی تعداد کم ہو۔
چھوٹی اشیاء کو ان لائن کریں: چھوٹی CSS یا JavaScript فائلز کو براہ راست HTML میں شامل کریں۔
2. امیجز کو بہتر بنائیں
کمپریس کریں: امیجز کو کم کریں بغیر زیادہ معیار متاثر کیے۔
جوابی امیجز: مختلف ڈیوائسز کے لیے مختلف امیج سائز استعمال کریں تاکہ مناسب سائز لوڈ ہو۔
فارمیٹس: جدید فارمیٹس جیسے WebP یا AVIF استعمال کریں جو بہتر کمپریسشن اور معیار فراہم کرتے ہیں۔
3. کیشنگ کا فائدہ اٹھائیں
براؤزر کیشنگ: اسٹیک وسائل کو براؤزر میں مقامی طور پر اسٹور کرنے کے لیے کیش ہیڈرز سیٹ کریں تاکہ ہر بار ڈاؤن لوڈ کی ضرورت نہ ہو۔
مواد کی ترسیل کا نیٹ ورک (CDN): CDN کا استعمال کریں تاکہ مواد کو صارف کے قریب سرورز سے کیش اور فراہم کیا جا سکے۔
سرور سائیڈ کیشنگ: سرور پر کیشنگ کی حکمت عملیوں کا اطلاق کریں، جیسے آبجیکٹ کیشنگ یا پیج کیشنگ، تاکہ سرور پر بوجھ کم ہو۔
4. فائلز کو منیفائی اور کمپریس کریں
منیفیکیشن: CSS، JavaScript، اور HTML فائلز سے غیر ضروری کردار (خالی جگہ، تبصرے) ہٹا کر ان کا حجم کم کریں۔
کمپریس کریں: Gzip یا Brotli کمپریشن کا استعمال کریں تاکہ HTTP جوابات کے حجم کو کم کیا جا سکے۔
5. JavaScript اور CSS کو بہتر بنائیں
غیر ہم وقتی لوڈنگ: JavaScript کو غیر ہم وقتی یا موخر لوڈنگ کا استعمال کریں تاکہ صفحے کی رینڈرنگ کو بلاک نہ کریں۔
تنقیدی CSS: صفحے کی ابتدائی رینڈرنگ کے لیے درکار تنقیدی CSS کو ان لائن کریں تاکہ پہلے پینٹ کا وقت کم ہو۔
کوڈ اسپلٹنگ: بڑے JavaScript فائلز کو چھوٹے ٹکڑوں میں تقسیم کریں جو ضرورت کے مطابق لوڈ ہو سکیں۔
6. مؤثر ڈیٹا فارمیٹس کا استعمال کریں
JSON بمقابلہ XML: ڈیٹا تبادلے کے لیے JSON کا استعمال کریں کیونکہ یہ زیادہ کمپیکٹ اور پارس کرنے میں تیز ہے۔
بڑی پیلوڈز سے پرہیز: پیلوڈز کو چھوٹا رکھیں تاکہ ڈیٹا کی ترسیل اور وصولی کے وقت کو کم کیا جا سکے۔
7. ڈیٹا بیس کی درخواستوں کو بہتر بنائیں
انڈیکسنگ: اکثر پوچھے گئے کالمز پر انڈیکس بنائیں تاکہ تلاش کی کارروائیوں کی رفتار تیز ہو سکے۔
درخواست کی بہتری: پیچیدہ درخواستوں کو بہتر بنائیں اور غیر ضروری ڈیٹا کی بازیابی سے پرہیز کریں۔
ڈیٹا بیس کنکشن پولنگ: ڈیٹا بیس کنکشنز کو مؤثر طریقے سے منظم اور دوبارہ استعمال کرنے کے لیے کنکشن پولنگ کا استعمال کریں۔
8. سرور کی کارکردگی کو بہتر بنائیں
لوڈ بیلنسنگ: ٹریفک کو متعدد سرورز میں تقسیم کریں تاکہ کوئی بھی سرور بوجھ سے بھر نہ جائے۔
سرور کی ترتیب: سرور کی ترتیبات کو ایپلیکیشن کی ضروریات کی بنیاد پر بہتر بنائیں۔
کوڈ کی بہتری: سرور سائیڈ کوڈ کو بہتر بنائیں تاکہ کارکردگی بڑھ سکے، جیسے حساب کتاب کی پیچیدگی کو کم کرنا اور بلاکنگ آپریشنز سے پرہیز کرنا۔
9. رینڈر بلاکنگ وسائل کو کم کریں
تنقیدی رینڈرنگ کا راستہ: CSS اور JavaScript کو بہتر بنائیں جو صفحے کی رینڈرنگ میں رکاوٹ ڈالتے ہیں۔
غیر تنقیدی JavaScript: غیر ضروری JavaScript کو ابتدائی صفحے کی لوڈنگ کے بعد لوڈ کریں۔
10. سست لوڈنگ کا اطلاق کریں
تصاویر اور ویڈیوز: تصاویر اور ویڈیوز کو صرف اس وقت لوڈ کریں جب وہ ویو پورٹ میں آئیں تاکہ ابتدائی صفحے کا لوڈنگ وقت کم ہو۔
اجزاء: ایسے اجزاء کے لیے سست لوڈنگ کا استعمال کریں جو فوراً ضروری نہ ہوں۔
11. کارکردگی کی نگرانی اور تجزیہ کریں
کارکردگی کے ٹولز: Google Lighthouse، WebPageTest، اور براؤزر کے ڈویلپر ٹولز جیسے ٹولز کا استعمال کریں تاکہ کارکردگی کا تجزیہ اور نگرانی کی جا سکے۔
حقیقی صارف کی نگرانی (RUM): حقیقی صارفین سے کارکردگی کے ڈیٹا کو جمع کرنے کے لیے RUM ٹولز کا اطلاق کریں تاکہ حقیقی دنیا کے مسائل کی نشاندہی کی جا سکے۔
12. ویب فونٹس کو بہتر بنائیں
فونٹ لوڈنگ: فونٹس کو بہتر بنانے کے لیے font-display: swap کا استعمال کریں تاکہ فونٹ کی رینڈرنگ کے مسائل کو حل کیا جا سکے اور محسوس شدہ کارکردگی کو بہتر بنایا جا سکے۔
فونٹس کا سب سیٹنگ: صرف ان حروف کو لوڈ کریں جو ویب سائٹ کے لیے درکار ہیں تاکہ فونٹ فائلز کا حجم کم ہو۔
13. سرور کے جواب کے وقت کو کم کریں
ایپلیکیشن کی بہتری: سرور پروسیسنگ کے وقت کو کم کرنے کے لیے ایپلیکیشن کوڈ کو بہتر بنائیں۔
ڈیٹا بیس کی بہتری: یقینی بنائیں کہ ڈیٹا بیس کی درخواستیں مؤثر ہیں اور سرور سائیڈ کوڈ کو بہتر بنایا گیا ہے۔
14. HTTP/2 کو فعال کریں
ملٹیپلیکسنگ: HTTP/2 ایک ہی کنکشن پر متعدد درخواستوں اور جوابات کو بھیجنے کی اجازت دیتا ہے، جس سے تاخیر کم ہوتی ہے۔
ہیڈر کمپریسشن: HTTP/2 HTTP ہیڈرز کو کمپریس کرتا ہے، جس سے اوور ہیڈ کم ہوتا ہے۔
ان تکنیکوں کو نافذ کرنے سے ویب ایپلیکیشنز کی کارکردگی میں نمایاں بہتری آ سکتی ہے، جس سے لوڈنگ کا وقت تیز ہوتا ہے، صارف کے تجربے میں بہتری آتی ہے، اور اسکیل ایبیلٹی میں اضافہ ہوتا ہے۔









<div>:

بلک لیول عنصر: <div> ایک بلاک لیول عنصر ہے، جس کا مطلب ہے کہ یہ پوری چوڑائی استعمال کرتا ہے اور ہر بار ایک نئی لائن پر شروع ہوتا ہے۔ یہ بڑے حصے یا مواد کے حصے کو گروپ کرنے کے لئے استعمال ہوتا ہے۔
مقصد: عام طور پر صفحے کی بڑی حصوں جیسے ہیڈرز، فوٹرز، اور مواد کے علاقوں کو ترتیب دینے کے لئے استعمال ہوتا ہے۔
<span>:

ان لائن عنصر: <span> ایک ان لائن عنصر ہے، یعنی یہ مواد کی لمبائی کے برابر جگہ لیتا ہے اور مواد کی ترتیب کو توڑتا نہیں ہے۔ یہ ایک مخصوص متن یا ان لائن مواد پر اسٹائل لگانے یا اس میں تبدیلی کرنے کے لیے استعمال ہوتا ہے۔
مقصد: عام طور پر مواد کے کسی چھوٹے حصے پر اسٹائل لگانے یا اس پر کام کرنے کے لئے استعمال ہوتا ہے، جیسے کہ پیراگراف میں کسی خاص لفظ کا رنگ بدلنا۔





What are some of the types of CSS that are used?


1. Inline CSS
Description: CSS styles are applied directly within an HTML element using the style attribute.

Syntax:
<p style="color: blue; font-size: 16px;">This is a paragraph with inline CSS.</p>

2. Internal CSS (Embedded CSS)
Description: CSS rules are defined within a <style> tag in the <head> section of an HTML document.

Syntax:
<html>
<head>
  <style>
    p {
      color: blue;
      font-size: 16px;
    }
  </style>
</head>
<body>
  <p>This is a paragraph with internal CSS.</p>
</body>
</html>

3. External CSS
Description: CSS rules are defined in an external stylesheet file and linked to the HTML document using a <link> tag.

Syntax:

styles.css
p {
  color: blue;
  font-size: 16px;
}
index.html

html
Copy code
<html>
<head>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <p>This is a paragraph with external CSS.</p>
</body>


What is the purpose of a Doctype in HTML?
<!DOCTYPE> ڈیکلریشن کا مقصد یہ ہے کہ براؤزر کو بتائے کہ HTML کوڈ کس ورژن میں لکھا گیا ہے۔ اس کے علاوہ، یہ یہ بھی یقینی بناتی ہے کہ صفحہ براؤزر میں درست طریقے سے دکھایا جائے۔

خلاصہ:
HTML ورژن کی وضاحت: <!DOCTYPE> براؤزر کو بتاتی ہے کہ HTML کا کون سا ورژن استعمال ہو رہا ہے۔
درست رینڈرنگ: یہ یقینی بناتی ہے کہ صفحہ براؤزر میں درست اور متوقع طریقے سے ظاہر ہو۔
یہ دونوں مقاصد مل کر ویب پیج کی درست اور مستحکم پیشکش کو یقینی بناتے ہیں۔























